---

###
### Gather subnet
###

- name: "({{ cluster.name }}) set utility subnet filter"
  set_fact:
    kops_subnet_utility_filters:
      - key: state
        val: available
      - key: vpc-id
        val: "{{ kops_vpc_id }}"
      - key: availability-zone
        val: "{{ cluster.region | default(kops_default_region) }}{{ az }}"
      - key: "tag:Name"
        val: "utility-{{ cluster.region | default(kops_default_region) }}{{ az }}.{{ cluster.name }}"
      - key: "tag:SubnetType"
        val: Utility
      - key: "tag:kubernetes.io/cluster/{{ cluster.name }}"
        val: shared
      - key: "tag:kubernetes.io/role/elb"
        val: "1"

- name: "({{ cluster.name }}) gather utility subnet facts"
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ kops_aws_profile | default(omit) }}"
    region: "{{ cluster.region | default(kops_default_region) }}"
    filters: "{{ kops_subnet_utility_filters | get_attr('key', 'val') }}"
  register: _kops_subnet_utility_facts

- name: "({{ cluster.name }}) fail if not exactly one utility subnet was not found"
  assert:
    that:
      - _kops_subnet_utility_facts.subnets is defined
      - _kops_subnet_utility_facts.subnets | length == 1
    msg: "Not exactly one utility subnet has been found in az: {{ az }}"


###
### Gather NAT GW
###

- name: "({{ cluster.name }}) set NAT GW filter"
  set_fact:
    kops_subnet_utility_nat_filters:
      - key: state
        val: available
      - key: vpc-id
        val: "{{ kops_vpc_id }}"
      - key: subnet-id
        val: "{{ _kops_subnet_utility_facts.subnets[0].id }}"

- name: "({{ cluster.name }}) gather nat gateway by filter"
  ec2_vpc_nat_gateway_facts:
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ kops_aws_profile | default(omit) }}"
    region: "{{ cluster.region | default(kops_default_region) }}"
    filters: "{{ kops_subnet_utility_nat_filters | get_attr('key', 'val') }}"
  register: _kops_nat_gw_facts

- name: "({{ cluster.name }}) fail if not exactly one NAT gateway was found by filter"
  assert:
    that:
      - _kops_nat_gw_facts.result is defined
      - _kops_nat_gw_facts.result | length == 1
    msg: Not exactly one NAT gateway has been found
  when: not kops_externally_managed_egress


###
### Set return variable
###

- name: "({{ cluster.name }}) set utility dict item"
  set_fact:
    kops_utility_item: |
      {{
        {
          _kops_subnet_utility_facts.subnets[0].availability_zone | regex_search('(.?)$', '\1') | first: {
            'id':   _kops_subnet_utility_facts.subnets[0].id,
            'az':   _kops_subnet_utility_facts.subnets[0].availability_zone,
            'cidr': _kops_subnet_utility_facts.subnets[0].cidr_block,
            'nat_id': '' if kops_externally_managed_egress else _kops_nat_gw_facts.result[0].nat_gateway_id
          }
        }
      }}

- name: "({{ cluster.name }}) merge utility subnet array"
  set_fact:
    kops_utility_subnets: "{{ kops_utility_subnets | combine(kops_utility_item) }}"
