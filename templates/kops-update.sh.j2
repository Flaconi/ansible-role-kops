#!/usr/bin/env bash

set -e
set -u
set -o pipefail

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

export NAME="{{ cluster.name }}"
export KOPS_STATE_STORE="s3://{{ cluster.s3_bucket_name }}"

RUN=0
{% raw %}
if [ "${#}" -gt "0" ] && [ "${1}" = "--yes" ]; then
{% endraw %}
	RUN=1
fi

{# Start of AWS Account check #}
{% if kops_default_aws_account_limit | length > 0 %}
if [ "${RUN}" -eq "1" ]; then
	if ! command -v aws >/dev/null 2>&1; then
		>&2 echo "Error, aws binary not available but required to check for correct AWS account."
		exit 1
	fi
	if ! AWS_ACCOUNT="$( aws sts get-caller-identity --output text --query 'Account' )"; then
		>&2 echo "Error, 'aws sts get-caller-identity' failed."
		exit 1
	fi
	FOUND=0
{% for acc in kops_default_aws_account_limit %}
	if [ "${AWS_ACCOUNT}" = "{{ acc }}" ]; then
		FOUND=1
	fi
{% endfor %}
	if [ "${FOUND}" -ne "1" ]; then
		>&2 echo "Error, ${AWS_ACCOUNT} is not allowed."
		exit 1
	fi
fi
{% endif %}
{# End of AWS Account check #}


echo
echo
echo "#================================================================================"
echo "#"
echo "#   U P D A T E   K O P S   C L U S T E R"
echo "#"
if [ "${RUN}" -eq "1" ]; then
	echo "#   !!! EXECUTING COMMANDS !!!"
else
	echo "#   NOTES: RUN WITH '--yes' to execute this script."
fi
echo "#"
echo "#================================================================================"
echo
echo



echo "#------------------------------------------------------------"
echo "# 1/3 Update Kops configuration on S3"
echo "#------------------------------------------------------------"

echo "kops replace --state ${KOPS_STATE_STORE} --name ${NAME} -f cluster.yml"
if [ "${RUN}" -eq "1" ]; then
	kops replace --state ${KOPS_STATE_STORE} --name ${NAME} -f "${SCRIPTPATH}/cluster.yml"
fi

echo "kops replace --state ${KOPS_STATE_STORE} --name ${NAME} -f instance-groups.yml"
if [ "${RUN}" -eq "1" ]; then
	kops replace --state ${KOPS_STATE_STORE} --name ${NAME} -f "${SCRIPTPATH}/instance-groups.yml"
fi

echo "kops delete secret --state ${KOPS_STATE_STORE} --name ${NAME} sshpublickey admin"
echo "kops create secret --state ${KOPS_STATE_STORE} --name ${NAME} sshpublickey admin -i ./ssh-key.pub"
if [ "${RUN}" -eq "1" ]; then
	kops delete secret --state ${KOPS_STATE_STORE} --name ${NAME} sshpublickey admin
	kops create secret --state ${KOPS_STATE_STORE} --name ${NAME} sshpublickey admin -i "${SCRIPTPATH}/ssh-key.pub"
fi
echo

echo "Test ${SCRIPTPATH}/dockerconfig.json exist"
if [ -f "${SCRIPTPATH}/dockerconfig.json" ]; then
	echo "kops create secret --state ${KOPS_STATE_STORE} --name ${NAME} dockerconfig -f ${SCRIPTPATH}/dockerconfig.json"
	if [ "${RUN}" -eq "1" ]; then
		kops create secret --state ${KOPS_STATE_STORE} --name ${NAME} dockerconfig -f "${SCRIPTPATH}/dockerconfig.json" --force
	fi
else
	kops delete secret secret dockerconfig
fi
echo



echo "#------------------------------------------------------------"
echo "# 2/3 Update Kops cluster"
echo "#------------------------------------------------------------"

echo "kops update cluster --state ${KOPS_STATE_STORE} --name ${NAME} --create-kube-config=false"
if [ "${RUN}" -eq "1" ]; then
	kops update cluster --state ${KOPS_STATE_STORE} --name ${NAME} --create-kube-config=false
fi

echo "kops update cluster --state ${KOPS_STATE_STORE} --name ${NAME} --create-kube-config=false --yes"
if [ "${RUN}" -eq "1" ]; then
	kops update cluster --state ${KOPS_STATE_STORE} --name ${NAME} --create-kube-config=false --yes
fi
echo



echo "#------------------------------------------------------------"
echo "# 3/3 Rolling Update Kops cluster"
echo "#------------------------------------------------------------"

echo "kops rolling-update cluster --state ${KOPS_STATE_STORE} --name ${NAME}"
if [ "${RUN}" -eq "1" ]; then
	kops rolling-update cluster --state ${KOPS_STATE_STORE} --name ${NAME}
fi

echo "kops rolling-update cluster --state ${KOPS_STATE_STORE} --name ${NAME} --yes"
if [ "${RUN}" -eq "1" ]; then
	kops rolling-update cluster --state ${KOPS_STATE_STORE} --name ${NAME} --yes
fi
echo
