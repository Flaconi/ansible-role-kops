apiVersion: kops.k8s.io/v1alpha2
kind: Cluster
metadata:
  creationTimestamp: null
  name: {{ cluster.name }}
spec:
  kubelet:
    anonymousAuth: false
    authenticationTokenWebhook: true
    authorizationMode: Webhook
  kubeControllerManager:
    enableProfiling: false
  api:
    loadBalancer:
      type: Public
{% if cluster.api_additional_sgs is defined and cluster.api_additional_sgs|length > 0 %}
      additionalSecurityGroups:
{% for name in cluster.api_additional_sgs %}
        - {{ kops_api_additional_sgs[name] }}
{% endfor %}
{% endif %}
{% set aws_iam_authenticator_enabled = cluster.aws_iam_authenticator_enabled if 'aws_iam_authenticator_enabled' in cluster else kops_default_aws_iam_authenticator_enabled %}
{% if aws_iam_authenticator_enabled == true %}
  # Enable AWS IAM Authenticator
  authentication:
    aws: {}
{% endif %}
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{ cluster.s3_bucket_name }}/{{ cluster.name }}
  docker:
    insecureRegistry: 100.64.0.0/10
{% if 'kube_api_server' in cluster and cluster.kube_api_server %}
  kubeAPIServer:
{{ cluster.kube_api_server | to_nice_yaml(indent=2) | indent(width=4, first=True) }}
{% endif %}
{% set file_assets_enabled = true if 'file_assets' in cluster and cluster.file_assets %}
{% set encryption_enabled = true if cluster.encryptionConfig is defined and 'enabled' in cluster.encryptionConfig and cluster.encryptionConfig.enabled %}
{% if file_assets_enabled or encryption_enabled %}
  fileAssets:
{% if file_assets_enabled %}
{{ cluster.file_assets | to_nice_yaml(indent=2) | indent(width=4, first=True) }}
{%- endif %}
{% if encryption_enabled %}
    - name: aws-encryption-provider.yaml
      ## Note if not path is specified the default path it /srv/kubernetes/assets/<name>
      path: /etc/kubernetes/manifests/aws-encryption-provider.yaml
      roles:
      - Master
      content: |
        apiVersion: v1
        kind: Pod
        metadata:
          annotations:
            scheduler.alpha.kubernetes.io/critical-pod: ""
          labels:
            k8s-app: aws-encryption-provider
          name: aws-encryption-provider
          namespace: kube-system
        spec:
          containers:
          - image: {{ cluster.encryptionConfig.image }}
            name: aws-encryption-provider
            command:
            - /aws-encryption-provider
            - --key=arn:aws:kms:{{ cluster.region }}:{{ aws_account }}:key/{{ cluster.encryptionConfig.kms_id }}
            - --region={{ cluster.region }}
            - --listen=/srv/kubernetes/socket.sock
            - --health-port=:8083
            ports:
            - containerPort: 8083
              protocol: TCP
            livenessProbe:
              httpGet:
                path: /healthz
                port: 8083
            volumeMounts:
            - mountPath: /srv/kubernetes
              name: kmsplugin
          hostNetwork: true
          priorityClassName: system-cluster-critical
          volumes:
          - name: kmsplugin
            hostPath:
              path: /srv/kubernetes
              type: DirectoryOrCreate
{% endif %}
{# End of encryption_enabled #}
{% endif %}
{# End of file_assets_enabled or encryption_enabled #}
{% if 'additionalPolicies' in cluster and cluster.additionalPolicies and
  ( 'node' in cluster.additionalPolicies and cluster.additionalPolicies.node or
  'master' in cluster.additionalPolicies and cluster.additionalPolicies.master ) %}
  additionalPolicies:
{% if 'node' in cluster.additionalPolicies and cluster.additionalPolicies.node %}
    node: |
{{ cluster.additionalPolicies.node | from_json | to_nice_json(indent=2) | indent(width=6, first=True) }}
{% endif %}
{% if 'master' in cluster.additionalPolicies and cluster.additionalPolicies.master %}
    master: |
{{ cluster.additionalPolicies.master | from_json | to_nice_json(indent=2) | indent(width=6, first=True) }}
{% endif %}
{% endif %}
  etcdClusters:
    - etcdMembers:
{# Start of var definition #}
{% set master_cnt = cluster.master.count if 'master' in cluster and 'count' in cluster.master else kops_default_master_count %}
{% set master_azs = cluster.master.az if 'master' in cluster and 'az' in cluster.master else kops_default_master_az %}
{# End of var definition #}
{# Loop as many times as master nodes have been defined #}
{% for n in range(0, master_cnt) %}
{# mod operation #}
{% set index = n % (master_azs | length) %}
{% set curr_az = master_azs[index] %}
{% set subnet = kops_private_subnets[curr_az] %}
      - instanceGroup: master-{{ subnet.az }}
        name: {{ curr_az }}-{{ n }}
{% endfor %}
      name: main
    - etcdMembers:
{# Loop as many times as master nodes have been defined #}
{% for n in range(0, master_cnt) %}
{# mod operation #}
{% set index = n % (master_azs | length) %}
{% set curr_az = master_azs[index] %}
{% set subnet = kops_private_subnets[curr_az] %}
      - instanceGroup: master-{{ subnet.az }}
        name: {{ curr_az }}-{{ n }}
{% endfor %}
      name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubernetesApiAccess:
{% for ip in cluster.api_access | default(kops_default_api_access) %}
    - {{ ip }}
{% endfor %}
  kubernetesVersion: {{ cluster.version | default(kops_default_version) }}
  masterPublicName: {{ cluster.master_public_name | default('api.' + cluster.name) }}
  networkCIDR: {{ kops_vpc_cidr }}
  networkID: {{ kops_vpc_id }}
  networking:
    # https://github.com/kubernetes/kops/blob/master/docs/networking.md#enable-cross-subnet-mode-in-calico-aws-only
    #calico: {}
    calico:
      crossSubnet: true
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
{% for ip in cluster.ssh_access | default(kops_default_ssh_access) %}
    - {{ ip }}
{% endfor %}
{% for ip in kops_ssh_additional_cidrs %}
    - {{ ip }}
{% endfor %}
  subnets:
{% for subnet in (kops_private_subnets.keys() | sort) %}
    - cidr: {{ kops_private_subnets[subnet].cidr }}
      id: {{ kops_private_subnets[subnet].id }}
      {% if kops_externally_managed_egress -%}
      egress: External
      {% else -%}
      {# The NAT GW ID is taken from the public subnets equivalents -#}
      egress: {{ kops_utility_subnets[subnet].nat_id }}
      {% endif -%}
      name: {{ kops_private_subnets[subnet].az }}
      type: Private
      zone: {{ kops_private_subnets[subnet].az }}
{% endfor %}
{% for subnet in (kops_utility_subnets.keys() | sort) %}
    - cidr: {{ kops_utility_subnets[subnet].cidr }}
      id: {{ kops_utility_subnets[subnet].id }}
      name: utility-{{ kops_utility_subnets[subnet].az }}
      type: Utility
      zone: {{ kops_utility_subnets[subnet].az }}
{% endfor %}
  topology:
#    bastion:
#      bastionPublicName: bastion.{{ cluster.name }}
    dns:
      type: Public
    masters: private
    nodes: private
{% if cluster.encryptionConfig is defined and 'enabled' in cluster.encryptionConfig and
  cluster.encryptionConfig.enabled %}
  encryptionConfig: true
{% endif %}
